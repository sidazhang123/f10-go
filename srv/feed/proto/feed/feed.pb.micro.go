// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feed/feed.proto

package feed

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Feed service

func NewFeedEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Feed service

type FeedService interface {
	CreateRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*PlainRsp, error)
	ReadRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*RuleRsp, error)
	UpdateRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*PlainRsp, error)
	DeleteRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*PlainRsp, error)
	GetFocusStat(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*Chans, error)
	GenerateFocus(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error)
	ToggleFocusDel(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error)
	ToggleFocusFav(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error)
	PurgeFocus(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error)
	ReadFocus(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error)
	AddJPushReg(ctx context.Context, in *JPushReg, opts ...client.CallOption) (*PlainRsp, error)
	Log(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*PlainRsp, error)
	GenerateOperationalAnalysisDiffCSV(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*PlainRsp, error)
	DeleteOutdatedFocus(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*PlainRsp, error)
	GetChanODay(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*Chans, error)
	SetChanODay(ctx context.Context, in *Chans, opts ...client.CallOption) (*PlainRsp, error)
}

type feedService struct {
	c    client.Client
	name string
}

func NewFeedService(name string, c client.Client) FeedService {
	return &feedService{
		c:    c,
		name: name,
	}
}

func (c *feedService) CreateRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.CreateRule", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) ReadRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*RuleRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.ReadRule", in)
	out := new(RuleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) UpdateRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.UpdateRule", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) DeleteRule(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.DeleteRule", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetFocusStat(ctx context.Context, in *RuleReq, opts ...client.CallOption) (*Chans, error) {
	req := c.c.NewRequest(c.name, "Feed.GetFocusStat", in)
	out := new(Chans)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GenerateFocus(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.GenerateFocus", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) ToggleFocusDel(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.ToggleFocusDel", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) ToggleFocusFav(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.ToggleFocusFav", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) PurgeFocus(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.PurgeFocus", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) ReadFocus(ctx context.Context, in *ManipulateFocusReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.ReadFocus", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) AddJPushReg(ctx context.Context, in *JPushReg, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.AddJPushReg", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) Log(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.Log", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GenerateOperationalAnalysisDiffCSV(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.GenerateOperationalAnalysisDiffCSV", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) DeleteOutdatedFocus(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.DeleteOutdatedFocus", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) GetChanODay(ctx context.Context, in *PlainReq, opts ...client.CallOption) (*Chans, error) {
	req := c.c.NewRequest(c.name, "Feed.GetChanODay", in)
	out := new(Chans)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) SetChanODay(ctx context.Context, in *Chans, opts ...client.CallOption) (*PlainRsp, error) {
	req := c.c.NewRequest(c.name, "Feed.SetChanODay", in)
	out := new(PlainRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Feed service

type FeedHandler interface {
	CreateRule(context.Context, *RuleReq, *PlainRsp) error
	ReadRule(context.Context, *RuleReq, *RuleRsp) error
	UpdateRule(context.Context, *RuleReq, *PlainRsp) error
	DeleteRule(context.Context, *RuleReq, *PlainRsp) error
	GetFocusStat(context.Context, *RuleReq, *Chans) error
	GenerateFocus(context.Context, *ManipulateFocusReq, *PlainRsp) error
	ToggleFocusDel(context.Context, *ManipulateFocusReq, *PlainRsp) error
	ToggleFocusFav(context.Context, *ManipulateFocusReq, *PlainRsp) error
	PurgeFocus(context.Context, *ManipulateFocusReq, *PlainRsp) error
	ReadFocus(context.Context, *ManipulateFocusReq, *PlainRsp) error
	AddJPushReg(context.Context, *JPushReg, *PlainRsp) error
	Log(context.Context, *PlainReq, *PlainRsp) error
	GenerateOperationalAnalysisDiffCSV(context.Context, *PlainReq, *PlainRsp) error
	DeleteOutdatedFocus(context.Context, *PlainReq, *PlainRsp) error
	GetChanODay(context.Context, *PlainReq, *Chans) error
	SetChanODay(context.Context, *Chans, *PlainRsp) error
}

func RegisterFeedHandler(s server.Server, hdlr FeedHandler, opts ...server.HandlerOption) error {
	type feed interface {
		CreateRule(ctx context.Context, in *RuleReq, out *PlainRsp) error
		ReadRule(ctx context.Context, in *RuleReq, out *RuleRsp) error
		UpdateRule(ctx context.Context, in *RuleReq, out *PlainRsp) error
		DeleteRule(ctx context.Context, in *RuleReq, out *PlainRsp) error
		GetFocusStat(ctx context.Context, in *RuleReq, out *Chans) error
		GenerateFocus(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error
		ToggleFocusDel(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error
		ToggleFocusFav(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error
		PurgeFocus(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error
		ReadFocus(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error
		AddJPushReg(ctx context.Context, in *JPushReg, out *PlainRsp) error
		Log(ctx context.Context, in *PlainReq, out *PlainRsp) error
		GenerateOperationalAnalysisDiffCSV(ctx context.Context, in *PlainReq, out *PlainRsp) error
		DeleteOutdatedFocus(ctx context.Context, in *PlainReq, out *PlainRsp) error
		GetChanODay(ctx context.Context, in *PlainReq, out *Chans) error
		SetChanODay(ctx context.Context, in *Chans, out *PlainRsp) error
	}
	type Feed struct {
		feed
	}
	h := &feedHandler{hdlr}
	return s.Handle(s.NewHandler(&Feed{h}, opts...))
}

type feedHandler struct {
	FeedHandler
}

func (h *feedHandler) CreateRule(ctx context.Context, in *RuleReq, out *PlainRsp) error {
	return h.FeedHandler.CreateRule(ctx, in, out)
}

func (h *feedHandler) ReadRule(ctx context.Context, in *RuleReq, out *RuleRsp) error {
	return h.FeedHandler.ReadRule(ctx, in, out)
}

func (h *feedHandler) UpdateRule(ctx context.Context, in *RuleReq, out *PlainRsp) error {
	return h.FeedHandler.UpdateRule(ctx, in, out)
}

func (h *feedHandler) DeleteRule(ctx context.Context, in *RuleReq, out *PlainRsp) error {
	return h.FeedHandler.DeleteRule(ctx, in, out)
}

func (h *feedHandler) GetFocusStat(ctx context.Context, in *RuleReq, out *Chans) error {
	return h.FeedHandler.GetFocusStat(ctx, in, out)
}

func (h *feedHandler) GenerateFocus(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error {
	return h.FeedHandler.GenerateFocus(ctx, in, out)
}

func (h *feedHandler) ToggleFocusDel(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error {
	return h.FeedHandler.ToggleFocusDel(ctx, in, out)
}

func (h *feedHandler) ToggleFocusFav(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error {
	return h.FeedHandler.ToggleFocusFav(ctx, in, out)
}

func (h *feedHandler) PurgeFocus(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error {
	return h.FeedHandler.PurgeFocus(ctx, in, out)
}

func (h *feedHandler) ReadFocus(ctx context.Context, in *ManipulateFocusReq, out *PlainRsp) error {
	return h.FeedHandler.ReadFocus(ctx, in, out)
}

func (h *feedHandler) AddJPushReg(ctx context.Context, in *JPushReg, out *PlainRsp) error {
	return h.FeedHandler.AddJPushReg(ctx, in, out)
}

func (h *feedHandler) Log(ctx context.Context, in *PlainReq, out *PlainRsp) error {
	return h.FeedHandler.Log(ctx, in, out)
}

func (h *feedHandler) GenerateOperationalAnalysisDiffCSV(ctx context.Context, in *PlainReq, out *PlainRsp) error {
	return h.FeedHandler.GenerateOperationalAnalysisDiffCSV(ctx, in, out)
}

func (h *feedHandler) DeleteOutdatedFocus(ctx context.Context, in *PlainReq, out *PlainRsp) error {
	return h.FeedHandler.DeleteOutdatedFocus(ctx, in, out)
}

func (h *feedHandler) GetChanODay(ctx context.Context, in *PlainReq, out *Chans) error {
	return h.FeedHandler.GetChanODay(ctx, in, out)
}

func (h *feedHandler) SetChanODay(ctx context.Context, in *Chans, out *PlainRsp) error {
	return h.FeedHandler.SetChanODay(ctx, in, out)
}
