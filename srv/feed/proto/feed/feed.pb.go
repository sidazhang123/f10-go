// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: proto/feed/feed.proto

package feed

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Chan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChanName string `protobuf:"bytes,2,opt,name=chanName,proto3" json:"chanName,omitempty"`
	NoMsg    int32  `protobuf:"varint,3,opt,name=NoMsg,proto3" json:"NoMsg,omitempty"`
}

func (x *Chan) Reset() {
	*x = Chan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chan) ProtoMessage() {}

func (x *Chan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chan.ProtoReflect.Descriptor instead.
func (*Chan) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{0}
}

func (x *Chan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chan) GetChanName() string {
	if x != nil {
		return x.ChanName
	}
	return ""
}

func (x *Chan) GetNoMsg() int32 {
	if x != nil {
		return x.NoMsg
	}
	return 0
}

type Chans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Chans   []*Chan `protobuf:"bytes,3,rep,name=chans,proto3" json:"chans,omitempty"`
}

func (x *Chans) Reset() {
	*x = Chans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chans) ProtoMessage() {}

func (x *Chans) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chans.ProtoReflect.Descriptor instead.
func (*Chans) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{1}
}

func (x *Chans) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Chans) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Chans) GetChans() []*Chan {
	if x != nil {
		return x.Chans
	}
	return nil
}

type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{2}
}

func (x *Stock) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Stock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stock) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Stocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg     string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Stocks  []*Stock `protobuf:"bytes,3,rep,name=stocks,proto3" json:"stocks,omitempty"`
}

func (x *Stocks) Reset() {
	*x = Stocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stocks) ProtoMessage() {}

func (x *Stocks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stocks.ProtoReflect.Descriptor instead.
func (*Stocks) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{3}
}

func (x *Stocks) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Stocks) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Stocks) GetStocks() []*Stock {
	if x != nil {
		return x.Stocks
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TarCol  string   `protobuf:"bytes,1,opt,name=tar_col,json=tarCol,proto3" json:"tar_col,omitempty"`
	Id      string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Channel string   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Key     string   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Cond1   []string `protobuf:"bytes,5,rep,name=cond1,proto3" json:"cond1,omitempty"`
	Cond2   []string `protobuf:"bytes,6,rep,name=cond2,proto3" json:"cond2,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{4}
}

func (x *Rule) GetTarCol() string {
	if x != nil {
		return x.TarCol
	}
	return ""
}

func (x *Rule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Rule) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Rule) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Rule) GetCond1() []string {
	if x != nil {
		return x.Cond1
	}
	return nil
}

func (x *Rule) GetCond2() []string {
	if x != nil {
		return x.Cond2
	}
	return nil
}

type RuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleReq) Reset() {
	*x = RuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleReq) ProtoMessage() {}

func (x *RuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleReq.ProtoReflect.Descriptor instead.
func (*RuleReq) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{5}
}

func (x *RuleReq) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type PlainReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PlainReq) Reset() {
	*x = PlainReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainReq) ProtoMessage() {}

func (x *PlainReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainReq.ProtoReflect.Descriptor instead.
func (*PlainReq) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{6}
}

func (x *PlainReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PlainRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PlainRsp) Reset() {
	*x = PlainRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainRsp) ProtoMessage() {}

func (x *PlainRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainRsp.ProtoReflect.Descriptor instead.
func (*PlainRsp) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{7}
}

func (x *PlainRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PlainRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RuleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Rules   []*Rule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleRsp) Reset() {
	*x = RuleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRsp) ProtoMessage() {}

func (x *RuleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRsp.ProtoReflect.Descriptor instead.
func (*RuleRsp) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{8}
}

func (x *RuleRsp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RuleRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RuleRsp) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ManipulateFocusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
	Date     string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Chan     *Chan  `protobuf:"bytes,3,opt,name=chan,proto3" json:"chan,omitempty"`
	Fav      int32  `protobuf:"varint,4,opt,name=fav,proto3" json:"fav,omitempty"`
	Del      int32  `protobuf:"varint,5,opt,name=del,proto3" json:"del,omitempty"`
}

func (x *ManipulateFocusReq) Reset() {
	*x = ManipulateFocusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulateFocusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulateFocusReq) ProtoMessage() {}

func (x *ManipulateFocusReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulateFocusReq.ProtoReflect.Descriptor instead.
func (*ManipulateFocusReq) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{9}
}

func (x *ManipulateFocusReq) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ManipulateFocusReq) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ManipulateFocusReq) GetChan() *Chan {
	if x != nil {
		return x.Chan
	}
	return nil
}

func (x *ManipulateFocusReq) GetFav() int32 {
	if x != nil {
		return x.Fav
	}
	return 0
}

func (x *ManipulateFocusReq) GetDel() int32 {
	if x != nil {
		return x.Del
	}
	return 0
}

type JPushReg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JPushReg) Reset() {
	*x = JPushReg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_feed_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JPushReg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JPushReg) ProtoMessage() {}

func (x *JPushReg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_feed_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JPushReg.ProtoReflect.Descriptor instead.
func (*JPushReg) Descriptor() ([]byte, []int) {
	return file_proto_feed_feed_proto_rawDescGZIP(), []int{10}
}

func (x *JPushReg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_proto_feed_feed_proto protoreflect.FileDescriptor

var file_proto_feed_feed_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61,
	0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x22, 0x48, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x4d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4e, 0x6f, 0x4d, 0x73, 0x67, 0x22, 0x6a, 0x0a, 0x05,
	0x43, 0x68, 0x61, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e,
	0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6e, 0x0a, 0x06, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33,
	0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6e,
	0x64, 0x31, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x64, 0x31, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x64, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x6e, 0x64, 0x32, 0x22, 0x40, 0x0a, 0x07, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66,
	0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x36, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6c, 0x0a,
	0x07, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31,
	0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x12,
	0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e,
	0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x52, 0x04, 0x63, 0x68, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x76, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x61, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x22, 0x1a, 0x0a, 0x08, 0x4a,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xf0, 0x0b, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x64,
	0x12, 0x57, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22,
	0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31,
	0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32,
	0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50,
	0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e,
	0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x73, 0x69, 0x64, 0x61,
	0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e,
	0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33,
	0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61,
	0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64,
	0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x22, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33,
	0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e,
	0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0d, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x64,
	0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61,
	0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x44,
	0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32,
	0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33,
	0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x46, 0x61, 0x76, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x64,
	0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72,
	0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61,
	0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x0a, 0x50, 0x75, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x2d,
	0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31,
	0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30,
	0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x46, 0x6f, 0x63, 0x75,
	0x73, 0x12, 0x2d, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33,
	0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e,
	0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4a, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x67, 0x12, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61,
	0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x4a, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x67, 0x1a, 0x23, 0x2e, 0x73, 0x69,
	0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61,
	0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x23,
	0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31,
	0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x43, 0x53, 0x56, 0x12, 0x23, 0x2e, 0x73, 0x69,
	0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73,
	0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e,
	0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x23,
	0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31,
	0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31,
	0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x4f, 0x44, 0x61, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61,
	0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33, 0x2e, 0x66, 0x31,
	0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x4f, 0x44, 0x61,
	0x79, 0x12, 0x20, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31, 0x32, 0x33,
	0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x73, 0x1a, 0x23, 0x2e, 0x73, 0x69, 0x64, 0x61, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x31,
	0x32, 0x33, 0x2e, 0x66, 0x31, 0x30, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_feed_feed_proto_rawDescOnce sync.Once
	file_proto_feed_feed_proto_rawDescData = file_proto_feed_feed_proto_rawDesc
)

func file_proto_feed_feed_proto_rawDescGZIP() []byte {
	file_proto_feed_feed_proto_rawDescOnce.Do(func() {
		file_proto_feed_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_feed_feed_proto_rawDescData)
	})
	return file_proto_feed_feed_proto_rawDescData
}

var file_proto_feed_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_feed_feed_proto_goTypes = []interface{}{
	(*Chan)(nil),               // 0: sidazhang123.f10.srv.feed.Chan
	(*Chans)(nil),              // 1: sidazhang123.f10.srv.feed.Chans
	(*Stock)(nil),              // 2: sidazhang123.f10.srv.feed.Stock
	(*Stocks)(nil),             // 3: sidazhang123.f10.srv.feed.Stocks
	(*Rule)(nil),               // 4: sidazhang123.f10.srv.feed.Rule
	(*RuleReq)(nil),            // 5: sidazhang123.f10.srv.feed.RuleReq
	(*PlainReq)(nil),           // 6: sidazhang123.f10.srv.feed.PlainReq
	(*PlainRsp)(nil),           // 7: sidazhang123.f10.srv.feed.PlainRsp
	(*RuleRsp)(nil),            // 8: sidazhang123.f10.srv.feed.RuleRsp
	(*ManipulateFocusReq)(nil), // 9: sidazhang123.f10.srv.feed.ManipulateFocusReq
	(*JPushReg)(nil),           // 10: sidazhang123.f10.srv.feed.JPushReg
}
var file_proto_feed_feed_proto_depIdxs = []int32{
	0,  // 0: sidazhang123.f10.srv.feed.Chans.chans:type_name -> sidazhang123.f10.srv.feed.Chan
	2,  // 1: sidazhang123.f10.srv.feed.Stocks.stocks:type_name -> sidazhang123.f10.srv.feed.Stock
	4,  // 2: sidazhang123.f10.srv.feed.RuleReq.rules:type_name -> sidazhang123.f10.srv.feed.Rule
	4,  // 3: sidazhang123.f10.srv.feed.RuleRsp.rules:type_name -> sidazhang123.f10.srv.feed.Rule
	0,  // 4: sidazhang123.f10.srv.feed.ManipulateFocusReq.chan:type_name -> sidazhang123.f10.srv.feed.Chan
	5,  // 5: sidazhang123.f10.srv.feed.Feed.CreateRule:input_type -> sidazhang123.f10.srv.feed.RuleReq
	5,  // 6: sidazhang123.f10.srv.feed.Feed.ReadRule:input_type -> sidazhang123.f10.srv.feed.RuleReq
	5,  // 7: sidazhang123.f10.srv.feed.Feed.UpdateRule:input_type -> sidazhang123.f10.srv.feed.RuleReq
	5,  // 8: sidazhang123.f10.srv.feed.Feed.DeleteRule:input_type -> sidazhang123.f10.srv.feed.RuleReq
	5,  // 9: sidazhang123.f10.srv.feed.Feed.GetFocusStat:input_type -> sidazhang123.f10.srv.feed.RuleReq
	9,  // 10: sidazhang123.f10.srv.feed.Feed.GenerateFocus:input_type -> sidazhang123.f10.srv.feed.ManipulateFocusReq
	9,  // 11: sidazhang123.f10.srv.feed.Feed.ToggleFocusDel:input_type -> sidazhang123.f10.srv.feed.ManipulateFocusReq
	9,  // 12: sidazhang123.f10.srv.feed.Feed.ToggleFocusFav:input_type -> sidazhang123.f10.srv.feed.ManipulateFocusReq
	9,  // 13: sidazhang123.f10.srv.feed.Feed.PurgeFocus:input_type -> sidazhang123.f10.srv.feed.ManipulateFocusReq
	9,  // 14: sidazhang123.f10.srv.feed.Feed.ReadFocus:input_type -> sidazhang123.f10.srv.feed.ManipulateFocusReq
	10, // 15: sidazhang123.f10.srv.feed.Feed.AddJPushReg:input_type -> sidazhang123.f10.srv.feed.JPushReg
	6,  // 16: sidazhang123.f10.srv.feed.Feed.Log:input_type -> sidazhang123.f10.srv.feed.PlainReq
	6,  // 17: sidazhang123.f10.srv.feed.Feed.GenerateOperationalAnalysisDiffCSV:input_type -> sidazhang123.f10.srv.feed.PlainReq
	6,  // 18: sidazhang123.f10.srv.feed.Feed.DeleteOutdatedFocus:input_type -> sidazhang123.f10.srv.feed.PlainReq
	6,  // 19: sidazhang123.f10.srv.feed.Feed.GetChanODay:input_type -> sidazhang123.f10.srv.feed.PlainReq
	1,  // 20: sidazhang123.f10.srv.feed.Feed.SetChanODay:input_type -> sidazhang123.f10.srv.feed.Chans
	7,  // 21: sidazhang123.f10.srv.feed.Feed.CreateRule:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	8,  // 22: sidazhang123.f10.srv.feed.Feed.ReadRule:output_type -> sidazhang123.f10.srv.feed.RuleRsp
	7,  // 23: sidazhang123.f10.srv.feed.Feed.UpdateRule:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 24: sidazhang123.f10.srv.feed.Feed.DeleteRule:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	1,  // 25: sidazhang123.f10.srv.feed.Feed.GetFocusStat:output_type -> sidazhang123.f10.srv.feed.Chans
	7,  // 26: sidazhang123.f10.srv.feed.Feed.GenerateFocus:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 27: sidazhang123.f10.srv.feed.Feed.ToggleFocusDel:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 28: sidazhang123.f10.srv.feed.Feed.ToggleFocusFav:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 29: sidazhang123.f10.srv.feed.Feed.PurgeFocus:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 30: sidazhang123.f10.srv.feed.Feed.ReadFocus:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 31: sidazhang123.f10.srv.feed.Feed.AddJPushReg:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 32: sidazhang123.f10.srv.feed.Feed.Log:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 33: sidazhang123.f10.srv.feed.Feed.GenerateOperationalAnalysisDiffCSV:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	7,  // 34: sidazhang123.f10.srv.feed.Feed.DeleteOutdatedFocus:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	1,  // 35: sidazhang123.f10.srv.feed.Feed.GetChanODay:output_type -> sidazhang123.f10.srv.feed.Chans
	7,  // 36: sidazhang123.f10.srv.feed.Feed.SetChanODay:output_type -> sidazhang123.f10.srv.feed.PlainRsp
	21, // [21:37] is the sub-list for method output_type
	5,  // [5:21] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_feed_feed_proto_init() }
func file_proto_feed_feed_proto_init() {
	if File_proto_feed_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_feed_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManipulateFocusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_feed_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JPushReg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_feed_feed_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_feed_feed_proto_goTypes,
		DependencyIndexes: file_proto_feed_feed_proto_depIdxs,
		MessageInfos:      file_proto_feed_feed_proto_msgTypes,
	}.Build()
	File_proto_feed_feed_proto = out.File
	file_proto_feed_feed_proto_rawDesc = nil
	file_proto_feed_feed_proto_goTypes = nil
	file_proto_feed_feed_proto_depIdxs = nil
}
