// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/accumulator/accumulator.proto

package accumulator

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Accumulator service

func NewAccumulatorEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Accumulator service

type AccumulatorService interface {
	Agg(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	ReprAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetRepr(ctx context.Context, in *ReprReq, opts ...client.CallOption) (*Response, error)
}

type accumulatorService struct {
	c    client.Client
	name string
}

func NewAccumulatorService(name string, c client.Client) AccumulatorService {
	return &accumulatorService{
		c:    c,
		name: name,
	}
}

func (c *accumulatorService) Agg(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Accumulator.Agg", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accumulatorService) ReprAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Accumulator.ReprAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accumulatorService) GetRepr(ctx context.Context, in *ReprReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Accumulator.GetRepr", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accumulator service

type AccumulatorHandler interface {
	Agg(context.Context, *Request, *Response) error
	ReprAll(context.Context, *Request, *Response) error
	GetRepr(context.Context, *ReprReq, *Response) error
}

func RegisterAccumulatorHandler(s server.Server, hdlr AccumulatorHandler, opts ...server.HandlerOption) error {
	type accumulator interface {
		Agg(ctx context.Context, in *Request, out *Response) error
		ReprAll(ctx context.Context, in *Request, out *Response) error
		GetRepr(ctx context.Context, in *ReprReq, out *Response) error
	}
	type Accumulator struct {
		accumulator
	}
	h := &accumulatorHandler{hdlr}
	return s.Handle(s.NewHandler(&Accumulator{h}, opts...))
}

type accumulatorHandler struct {
	AccumulatorHandler
}

func (h *accumulatorHandler) Agg(ctx context.Context, in *Request, out *Response) error {
	return h.AccumulatorHandler.Agg(ctx, in, out)
}

func (h *accumulatorHandler) ReprAll(ctx context.Context, in *Request, out *Response) error {
	return h.AccumulatorHandler.ReprAll(ctx, in, out)
}

func (h *accumulatorHandler) GetRepr(ctx context.Context, in *ReprReq, out *Response) error {
	return h.AccumulatorHandler.GetRepr(ctx, in, out)
}
