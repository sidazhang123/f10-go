// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/scheduler/scheduler.proto

package scheduler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Scheduler service

func NewSchedulerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Scheduler service

type SchedulerService interface {
	Once(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	NextScheduledTask(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateSchedule(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	ClearSchedule(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	RemoveTask(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DingAlarm(ctx context.Context, in *Request, opts ...client.CallOption) (*Error, error)
}

type schedulerService struct {
	c    client.Client
	name string
}

func NewSchedulerService(name string, c client.Client) SchedulerService {
	return &schedulerService{
		c:    c,
		name: name,
	}
}

func (c *schedulerService) Once(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Scheduler.Once", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) NextScheduledTask(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Scheduler.NextScheduledTask", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) UpdateSchedule(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Scheduler.UpdateSchedule", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) ClearSchedule(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Scheduler.ClearSchedule", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) RemoveTask(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Scheduler.RemoveTask", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerService) DingAlarm(ctx context.Context, in *Request, opts ...client.CallOption) (*Error, error) {
	req := c.c.NewRequest(c.name, "Scheduler.DingAlarm", in)
	out := new(Error)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerHandler interface {
	Once(context.Context, *Request, *Response) error
	NextScheduledTask(context.Context, *Request, *Response) error
	UpdateSchedule(context.Context, *Request, *Response) error
	ClearSchedule(context.Context, *Request, *Response) error
	RemoveTask(context.Context, *Request, *Response) error
	DingAlarm(context.Context, *Request, *Error) error
}

func RegisterSchedulerHandler(s server.Server, hdlr SchedulerHandler, opts ...server.HandlerOption) error {
	type scheduler interface {
		Once(ctx context.Context, in *Request, out *Response) error
		NextScheduledTask(ctx context.Context, in *Request, out *Response) error
		UpdateSchedule(ctx context.Context, in *Request, out *Response) error
		ClearSchedule(ctx context.Context, in *Request, out *Response) error
		RemoveTask(ctx context.Context, in *Request, out *Response) error
		DingAlarm(ctx context.Context, in *Request, out *Error) error
	}
	type Scheduler struct {
		scheduler
	}
	h := &schedulerHandler{hdlr}
	return s.Handle(s.NewHandler(&Scheduler{h}, opts...))
}

type schedulerHandler struct {
	SchedulerHandler
}

func (h *schedulerHandler) Once(ctx context.Context, in *Request, out *Response) error {
	return h.SchedulerHandler.Once(ctx, in, out)
}

func (h *schedulerHandler) NextScheduledTask(ctx context.Context, in *Request, out *Response) error {
	return h.SchedulerHandler.NextScheduledTask(ctx, in, out)
}

func (h *schedulerHandler) UpdateSchedule(ctx context.Context, in *Request, out *Response) error {
	return h.SchedulerHandler.UpdateSchedule(ctx, in, out)
}

func (h *schedulerHandler) ClearSchedule(ctx context.Context, in *Request, out *Response) error {
	return h.SchedulerHandler.ClearSchedule(ctx, in, out)
}

func (h *schedulerHandler) RemoveTask(ctx context.Context, in *Request, out *Response) error {
	return h.SchedulerHandler.RemoveTask(ctx, in, out)
}

func (h *schedulerHandler) DingAlarm(ctx context.Context, in *Request, out *Error) error {
	return h.SchedulerHandler.DingAlarm(ctx, in, out)
}
